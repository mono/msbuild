<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>$(RuntimeOutputTargetFrameworks)</TargetFrameworks>

    <!-- Don't warn on incompatability MSIL vs x86 since this isn't an actual working DLL -->
    <ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>None</ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>
    
    <DeterministicSourcePaths>false</DeterministicSourcePaths>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\MSBuild\MSBuild.csproj" />
    
    <!-- Direct project references needed here to avoid NuGet version conflict errors -->
    <ProjectReference Include="..\Framework\Microsoft.Build.Framework.csproj" />
    <ProjectReference Include="..\Tasks\Microsoft.Build.Tasks.csproj" />
    <ProjectReference Include="..\Utilities\Microsoft.Build.Utilities.csproj" />

    <ProjectReference Include="..\Build\Microsoft.Build.csproj" Condition="'$(MonoBuild)' == 'true'" />
  </ItemGroup>
  <ItemGroup>
    <!-- Include NuGet build tasks -->
    <PackageReference Include="NuGet.Build.Tasks" />
    <PackageReference Include="Microsoft.Build.NuGetSdkResolver" />
  </ItemGroup>

  <ItemGroup Condition="'$(MonoBuild)' == 'true'">
    <Content Include="$(RepoRoot)mono\layout\msbuild-bin\**\*" CopyToOutputDirectory="PreserveNewest" />

    <Content
        Include="$(RepoRoot)mono\dotnet-overlay\msbuild-bin\**\*"
        Exclude="$(RepoRoot)\mono\dotnet-overlay\msbuild-bin\SdkResolvers\**\*"
        CopyToOutputDirectory="PreserveNewest" />

    <!-- Use the NuGet.targets that we bundle, since that is what we will install so we should be testing against that -->
    <Content Include="$(RepoRoot)mono\dotnet-overlay\nuget-support\msbuild-bin\*" CopyToOutputDirectory="PreserveNewest" />

    <!-- This is for the second build. Copy over the resolvers from the bootstrap directory, which will include the
         nuget resolver also -->
    <Content
            Condition="'$(CreateBootstrap)' != 'true'"
            Include="$(MSBuildBinPath)\SdkResolvers\**\*" LinkBase="SdkResolvers" CopyToOutputDirectory="PreserveNewest" />

  </ItemGroup>

  <ItemGroup Condition="'$(MonoBuild)' != 'true'">
    <!-- This file is needed so the dotnet CLI knows how to map preview SDK versions to tfms (because tfms do not have preview information on them) -->
    <!-- This is because according to semver, 2.1.0-preview is not >= 2.1.0 -->
    <Content Include="$(RepoRoot).dotnet\sdk\$(DotNetCliVersion)\Microsoft.NETCoreSdk.BundledVersions.props" CopyToOutputDirectory="PreserveNewest" />

    <Content Include="$(RepoRoot).dotnet\sdk\$(DotNetCliVersion)\RuntimeIdentifierGraph.json" CopyToOutputDirectory="PreserveNewest" />

    <!-- Include DependencyModel libraries. -->
    <PackageReference Include="Microsoft.Extensions.DependencyModel" />
  </ItemGroup>

  <Target Name="RemoveMicrosoftBuildReferenceForMono" BeforeTargets="ResolveAssemblyReferences" Condition="'$(MonoBuild)' == 'true'">
      <ItemGroup>
          <Reference Remove="Microsoft.Build" Condition="%(Reference.NuGetPackageId) == 'NuGet.PackageManagement'" />
      </ItemGroup>
  </Target>

  <!-- Use deps file from this project with additional dependencies listed instead of the one generated in the MSBuild project -->
  <Target Name="UpdateMSBuildDepsFile" AfterTargets="Build" Condition="'$(TargetFramework)' == 'netcoreapp2.1' or '$(TargetFramework)' == 'netstandard2.0'">
    <Copy SourceFiles="$(OutputPath)$(AssemblyName).deps.json" DestinationFiles="$(OutputPath)MSBuild.deps.json" />
  </Target>
  <Target Name="UpdatePublishedMSBuildDepsFile" AfterTargets="Publish" Condition="'$(TargetFramework)' == 'netcoreapp2.1'">
    <Copy SourceFiles="$(PublishDir)$(AssemblyName).deps.json" DestinationFiles="$(PublishDir)MSBuild.deps.json" />
  </Target>

  <Import Project="..\Package\GetBinPaths.targets" Condition="$(TargetFramework.StartsWith('net4'))"/>

  <Import Project="$(RepoRoot)eng\BootStrapMSBuild.targets" />

</Project>
