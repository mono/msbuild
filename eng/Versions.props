<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) .NET Foundation and contributors. All rights reserved. Licensed under the MIT license. See License.txt in the project root for full license information. -->
<Project>
  <Import Project="$(DotNetRestoreSourcePropsPath)" Condition="'$(DotNetRestoreSourcePropsPath)' != ''" />
  <PropertyGroup>
    <RestoreSources>$(DotNetRestoreSources)</RestoreSources>
    <RestoreSources Condition="'$(DotNetBuildOffline)' != 'true'">
        $(RestoreSources);
        https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json;
        https://dotnet.myget.org/F/roslyn/api/v3/index.json;
        https://dotnet.myget.org/F/nuget-build/api/v3/index.json;
        https://dotnet.myget.org/F/roslyn-tools/api/v3/index.json;
        https://dotnet.myget.org/F/dotnet-buildtools/api/v3/index.json
    </RestoreSources>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>
  <PropertyGroup>
    <VersionPrefix>16.3.0</VersionPrefix>
    <!-- DotNetFinalVersionKind>release</DotNetFinalVersionKind -->
    <AssemblyVersion>15.1.0.0</AssemblyVersion>
    <PreReleaseVersionLabel>preview</PreReleaseVersionLabel>
    <DotNetUseShippingVersions>true</DotNetUseShippingVersions>
    <!-- Workaround for https://github.com/dotnet/roslyn/issues/35793 -->
    <SemanticVersioningV1>true</SemanticVersioningV1>
    <MicroBuildPluginsSwixBuildVersion>1.0.672</MicroBuildPluginsSwixBuildVersion>
    <MonoBuild Condition="'$(Configuration)' == 'Debug-MONO' or '$(Configuration)' == 'Release-MONO'">true</MonoBuild>
  </PropertyGroup>
  <!-- Repo Toolset Features -->
  <PropertyGroup Condition="'$(MonoBuild)' != 'true'">
    <UsingToolIbcOptimization>true</UsingToolIbcOptimization>
    <UsingToolVisualStudioIbcTraining>true</UsingToolVisualStudioIbcTraining>
    <UsingToolSymbolUploader>true</UsingToolSymbolUploader>
    <UsingToolVSSDK>true</UsingToolVSSDK>
  </PropertyGroup>
  <!-- Toolset Dependencies -->
  <PropertyGroup>
    <DotNetCliVersion>3.0.100-preview6-012264</DotNetCliVersion>
  </PropertyGroup>
  <!-- Product Dependencies -->
  <PropertyGroup>
    <SystemResourcesExtensionsVersion>4.6.0</SystemResourcesExtensionsVersion>
  </PropertyGroup>
  <Target Name="OverrideArcadeFileVersion" AfterTargets="_InitializeAssemblyVersion">
    <!-- MSBuild 16.2.0 didn't exist. It shipped as file version 16.200.19.32702,
         informational version 16.2.32702+c4012a063 because of confusion around
         Arcade versioning rules: https://github.com/dotnet/arcade/issues/3386

         This caused MSBuild -version to report 16.200.19.32702 and
         $(MSBuildVersion) to report 16.200.19, a confusing and error-prone
         situation. Since we're not confident we know all the places the
         AssemblyFileVersion has an observable effect, we want to set
         FileVersion to a format like it has been in the past.

         Arcade doesn't support this directly; AutoGenerateAssemblyVersion
         set to false means that FileVersion=$(AssemblyVersion), but that's
         not ok for MSBuild because we have a fixed AssemblyVersion for
         compat (15.1.0.0), but varied FileVersion, which is user-visible
         via $(MSBuildVersion) and msbuild -version.

         In the future we'll want this to start with $(VersionPrefix), but
         since 16.2 shipped with a high version, we need to extract a new
         higher version (generated by Arcade as the fourth part of the
         version).

         So: we want this to match the NuGet package version and also the
         AssemblyInformationalVersion. Jump through hoops to do so.
         -->
    <PropertyGroup>
      <FileVersion>$(VersionPrefix).$(FileVersion.Split('.')[3])</FileVersion>
    </PropertyGroup>
  </Target>
</Project>
